version: "3.8"

services:
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - app-net

  redis-insight:
    image: redislabs/redisinsight:latest
    container_name: redis-insight
    ports:
      - "8010:5540"
    depends_on:
      - redis
    networks:
      - app-net

  alb:
    image: nginx:alpine
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./alb/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./alb/certs:/etc/nginx/certs:ro
    depends_on:
      - frontend
    networks:
      - app-net

  frontend:
    build: ./frontend-app
    depends_on:
      - api-gateway
    networks:
      - app-net
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  api-gateway:
    build: ./api-gateway
    ports:
      - "8081:8081"
    depends_on:
      - backend
      - lambda-producer
    networks:
      - app-net
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  backend:
    build: ./backend-app
    ports:
      - "3000:3000"
    depends_on:
      - db
    networks:
      - app-net
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  db:
    image: postgres:14
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: mydb
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - app-net

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: pass
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-net

  lambda-producer:
    build: ./lambda-producer
    ports:
      - "3010:8081"
    depends_on:
      - rabbitmq
    networks:
      - app-net
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  lambda-consumer:
    build: ./lambda-consumer
    depends_on:
      rabbitmq:
        condition: service_healthy
      backend:
        condition: service_started
    networks:
      - app-net
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - app-net

  loki:
    container_name: loki
    image: grafana/loki:2.9.4
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/config.yml
    volumes:
      - ./monitoring/loki-config.yml:/etc/loki/config.yml
      - loki_data:/loki
    networks:
      - app-net

  grafana:
    image: grafana/grafana:10.4.2
    ports:
      - "3001:3000"
    volumes:
      - ./monitoring/grafana-provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
      - loki
    networks:
      - app-net

  promtail:
    container_name: promtail
    image: grafana/promtail:2.9.4
    ports:
      - "9080:9080"  # Optional: expose for health check
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - ./monitoring/promtail-config.yml:/etc/promtail/promtail-config.yml
    command: -config.file=/etc/promtail/promtail-config.yml
    networks:
      - app-net
    depends_on:
      - loki

  otel-collector:
    image: otel/opentelemetry-collector:latest
    container_name: otel-collector
    command: ["--config=/etc/otel-collector-config.yml"]
    volumes:
      - ./monitoring/otel-collector-config.yml:/etc/otel-collector-config.yml
    ports:
      - "4318:4318"
    networks:
      - app-net

volumes:
  pgdata:
  loki_data:

networks:
  app-net:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: br-app-net
